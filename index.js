require('dotenv').config();
const { logText } = require("./functs_utils.js");
const Discord = require("discord.js");
const { EmbedBuilder } = require('discord.js');
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const emailvalidator = require("email-validator");
const { exit } = require("process");
const fs = require('fs');
require("./splash_screen.js");
logText("Starting bot...");

const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

// Initialisation of Discord client
const Client = new Discord.Client({
    intents: [
        Discord.IntentsBitField.Flags.Guilds,
        Discord.IntentsBitField.Flags.GuildMessages,
        Discord.IntentsBitField.Flags.GuildMessageReactions,
        Discord.IntentsBitField.Flags.GuildMembers,
        Discord.IntentsBitField.Flags.MessageContent,
    ]
});
logText("Discord client initialized");

// Initialisation of XMLHttpRequest
let http = new XMLHttpRequest();
const method = 'POST';
const url = process.env.WEBHOOK_URL;

// Initialisation of variables for channels
const ChannelID_Welcome = process.env.WELCOME_CHANNEL_ID;
const ChannelID_Roles = process.env.ROLES_CHANNEL_ID;
const ChannelID_Rules = process.env.RULES_CHANNEL_ID;
const ChannelID_Controle = process.env.CONTROLE_CHANNEL_ID;

// Initialisation of variables for roles
const RoleID_membre = process.env.MEMBER_ROLE_ID;
const RoleID_visiteur = process.env.VISITOR_ROLE_ID;
const RoleID_controleur = process.env.CONTROLEUR_ROLE_ID;

// Initialisation of variables for guild
const GuildID = process.env.GUILD_ID;

let guild = null;
let memberID = null;

const embed_welcome = new EmbedBuilder()
    .setTitle("Bienvenue sur le serveur des Jeunes IHEDN")
    .setDescription("Bonjour, vous √™tes bien arriv√©s sur le serveur Discord de l'association des Jeunes IHEDN. Je vais vous guider pas √† pas pour acc√©der √† la communaut√©.")
    .addFields(
        { name: "√âtape 1", value: "Afin de vous identifier, merci de renseigner votre adresse email pour proc√©der au contr√¥le de votre cotisation (Cet email correspond √† celui indiqu√© lors de votre paiement sur HelloAsso)." },)
    .setImage("https://media.giphy.com/media/ygBB0CrnoRTDrzIrdG/giphy-downsized-large.gif")
    .setFooter({ text: "L'usurpation d'identit√© est √©videmment interdite." });

const embed_rules = new EmbedBuilder()
    .setTitle("R√®gles du serveur !")
    .setDescription("**√âtape 3** Acceptez le r√®glement du serveur des Jeunes IHEDN ci-dessous pour acc√©der √† l'int√©gralit√© du serveur")
    .addFields(
        { name: "Engagement", value: "Le statut de membre du serveur implique le respect des [statuts et du r√®glement int√©rieur](https://www.jeunes-ihedn.org/informations-administratives/) de l‚Äôassociation." },
        { name: "Compte", value: "Votre identit√© ne doit pas √™tre confondue avec celle d'une autre personne. L'usurpation d'identit√© √©tant √©videmment interdite." },
        { name: "G√©n√©ralit√©", value: "Le respect √©tant l'une des bases primordiales de la communication interpersonnelle, nous vous demandons d'√™tre le plus poli, courtois et correct possible envers les autres membres." },
        { name: "Expression", value: "Les propos discriminatoires (racistes, sexistes, x√©nophobe, lgbt-phobe...), √† caract√®re pornographique ou incitant √† la haine et/ou √† la violence sont proscrits." },
        { name: "Salons", value: "L'abus de messages, par spam, flood ou majuscules est prohib√© et tout manquement au r√®glement fera l'objet d'une sanction pouvant aller du rappel √† l'ordre au ban du serveur." },
        { name: "Rappel", value: "Les [Conditions d'Utilisation de Discord](https://discord.com/terms) et la [Charte d‚ÄôUtilisation de la Communaut√© Discord](https://discord.com/guidelines) s'appliquent √† tous les serveurs, dont celui-ci." },
        { name: "Aide", value: "Si vous avez besoin d'aide, ouvrez un ticket dans le canal <#949665174883803196> et un administrateur prendra contact avec vous" },)
    .setImage("https://c.tenor.com/EsQ7Ahmi_L4AAAAC/oss117-oss.gif")
    .setFooter({ text: "Pour accepter le r√®glement du serveur veuillez interagir avec la r√©action ci-dessous ! ‚úÖ" });

const embed_controle = new EmbedBuilder()
    .setTitle("Espace de contr√¥le des membres")
    .setDescription("Afin de proc√©der au contr√¥le de cotisation d'un membre, merci de renseigner son adresse email. Vous pouvez √©galement v√©rifier un membre du serveur en renseignant son ID [Aide](https://support.discord.com/hc/fr/articles/206346498-O%C3%B9-trouver-l-ID-de-mon-compte-utilisateur-serveur-message).")
    .addFields(
        { name: "V√©rification group√©e", value: "Si vous voulez contr√¥ler une liste de personnes rapidement, vous pouvez √©galement utiliser [ce service](https://tally.so/r/wv5r83)." },)
    .setImage("https://media.giphy.com/media/fovdbgAA1vQ6A/giphy.gif")
    .setFooter({ text: "Pour information, tous les membres pr√©sents sur le Discord sont √† jour de cotisation" });

const embed_roles = new EmbedBuilder()
    .setTitle("Espace d'int√©gration √† une entit√©")
    .setDescription("Afin d'autoriser, √† un membre (r√¥le <@&" + RoleID_membre + ">), l'acc√®s √† une entit√© sous votre responsabilit√© (üëë), merci de renseigner ci-dessous l'ID Discord de l'utilisateur (visible avec le mode d√©veloppeur activ√©).")
    .addFields(
        { name: "Trouver l'ID", value: "Sur mobile, il vous suffit de cliquer sur son profil, puis sur " + '"' + "Copier l'identifiant" + '"' + ". Sur PC, il vous faut r√©aliser un clic droit sur son profil, puis sur " + '"' + "Copier l'identifiant" + '"' + "." },
        { name: "Mode d√©veloppeur", value: "Pour activer ce mode, rendez-vous dans les param√®tres de votre profil, puis dans " + '"' + "Apparence" + '"' + " sur mobile ou " + '"' + "Avanc√©s" + '"' + " sur PC. [Aide](https://support.discord.com/hc/fr/articles/206346498-O%C3%B9-trouver-l-ID-de-mon-compte-utilisateur-serveur-message)" },
        { name: "Liste de vos membres", value: "Vous pouvez g√©n√©rer facilement la liste de vos membres Discord via [ce service](https://tally.so/r/nGe7Wo)." },)
    .setImage("https://media.giphy.com/media/WEYLWp4RrzTAiOFt7V/giphy.gif")
    .setFooter({ text: "Les acc√®s plus √©lev√©s (Cadre, Mod√©rateur ...) se demandent aupr√®s des mod√©rateurs, via le canal ‚ùî„Éªsupport-discord" });

function loginBot() {
    const token = process.env.API_KEY_BOT;
    if (!token) {
        logText("API_KEY_BOT is undefined. Please check your .env file.");
        exit(1);
    }
    logText(`Logging...`);
    Client.login(token)
        .then(() => {
            logText(`Bot connected successfully`);
        })
        .catch(err => {
            logText(`Error connecting to Discord - ${err.message}`);
            exit(1);
        });
}

loginBot();

const REFRESH_INTERVAL = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
setInterval(() => {
    logText("Refreshing bot token...");
    Client.destroy()
        .then(() => {
            logText("Bot disconnected successfully.");
            loginBot();
        })
        .catch(err => {
            logText(`Error disconnecting bot: ${err.message}`);
        });
}, REFRESH_INTERVAL);

Client.on("ready", () => {
    logText("Bot online !");

    const dataPath = './savedMessageIds.json';
    if (fs.existsSync(dataPath)) {
        const savedData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        savedData.forEach(data => {
            const channel = Client.channels.cache.get(data.channelId);
            if (channel) {
                channel.messages.fetch(data.messageId)
                    .then(message => {
                        message.delete();
                        logText(`Message deleted successfully: ID ${message.id} in channel: ${channel.id}`);
                    })
                    .catch(err => logText(`Failed to delete message: ${err.message}`));
            }
        });
        fs.writeFileSync(dataPath, '[]');
    }

    const messagesToSave = [];

    Client.channels.cache.get(ChannelID_Welcome).send({ embeds: [embed_welcome] }).then(message => {
        logText(`Welcome message published`);
        messagesToSave.push({ messageId: message.id, channelId: message.channel.id });
    }).catch(err => logText(`Failed to send welcome message: ${err.message}`));

    Client.channels.cache.get(ChannelID_Rules).send({ embeds: [embed_rules] }).then(message => {
        logText(`Rules message published`);
        messagesToSave.push({ messageId: message.id, channelId: message.channel.id });
    }).catch(err => logText(`Failed to send rules message: ${err.message}`));

    Client.channels.cache.get(ChannelID_Roles).send({ embeds: [embed_roles] }).then(message => {
        logText(`Roles message published`);
        messagesToSave.push({ messageId: message.id, channelId: message.channel.id });
    }).catch(err => logText(`Failed to send roles message: ${err.message}`));

    Client.channels.cache.get(ChannelID_Controle).send({ embeds: [embed_controle] }).then(message => {
        logText(`Controle message published`);
        messagesToSave.push({ messageId: message.id, channelId: message.channel.id });
    }).catch(err => logText(`Failed to send controle message: ${err.message}`));

    setTimeout(() => {
        fs.writeFileSync(dataPath, JSON.stringify(messagesToSave, null, 4));
    }, 5000);

    guild = Client.guilds.cache.get(GuildID);
});


Client.on("messageCreate", message => {
    // Filtrage bot
    if (message.author.bot) return;
    logText("Bot message received from " + message.author.id);

    // Channel de v√©rification
    if (message.channel.id === ChannelID_Welcome) {
        // R√¥le visiteur uniquement
        if (message.member.roles.cache.has(RoleID_visiteur)) {
            // Contr√¥le si email correct
            if (emailvalidator.validate(message.content)) {
                message.react("üîç");
                message.reply("V√©rification de votre cotisation en cours...")
                    .then(msg => {
                        setTimeout(() => msg.delete()
                            .then()
                            .catch(console.error)
                            , 5000)
                    })
                    .catch(console.error);
                setTimeout(() => message.delete()
                    .then()
                    .catch(console.error)
                    , 5000)
                var data = {
                    channel_id: message.channel.id,
                    user_message_id: message.id,
                    author_id: message.author.id,
                    content: message.content.toLowerCase(),
                    request_type: "NEW"
                };
                var jsonString = JSON.stringify(data);

                http.open(method, url);
                http.setRequestHeader("Content-Type", "application/json");
                http.send(jsonString);
                http = new XMLHttpRequest();
                logText("Sent email data for user " + message.author.id + " with email " + message.content);
            } else {
                message.react("‚ùå");
                message.reply("Merci de renseigner uniquement un email afin de proc√©der √† la v√©rification.")
                    .then(msg => {
                        setTimeout(() => msg.delete()
                            .then()
                            .catch(console.error)
                            , 10000)
                    })
                    .catch(console.error);
                setTimeout(() => message.delete()
                    .then()
                    .catch(console.error)
                    , 5000)
                logText("Email incorrect for user " + message.author.id + " with email " + message.content);
            }
        } else {
            message.react("‚õî");
            message.reply("Bonjour, vous n'√™tes pas autoris√© √† utiliser ce service.")
                .then(msg => {
                    setTimeout(() => msg.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                })
                .catch(console.error);
            setTimeout(() => message.delete()
                .then()
                .catch(console.error)
                , 5000)
            logText("User not allowed to use the service " + message.author.id + " in channel " + message.channel.id);
        }
        // Channel contr√¥le
    } else if (message.channel.id === ChannelID_Controle) {
        // R√¥le contr√¥leur uniquement
        if (message.member.roles.cache.has(RoleID_controleur)) {
            // Contr√¥le si email correct
            if (emailvalidator.validate(message.content)) {
                message.react("‚úÖ");
                message.reply("Bonjour, je vais proc√©der √† la v√©rification de la cotisation de cette personne.")
                    .then(msg => {
                        setTimeout(() => msg.delete()
                            .then()
                            .catch(console.error)
                            , 10000)
                    })
                    .catch(console.error);
                setTimeout(() => message.delete()
                    .then()
                    .catch(console.error)
                    , 5000)
                var data = {
                    channel_id: message.channel.id,
                    user_message_id: message.id,
                    author_id: message.author.id,
                    content: message.content.toLowerCase(),
                    request_type: "CHECK"
                };
                var jsonString = JSON.stringify(data);

                http.open(method, url);
                http.setRequestHeader("Content-Type", "application/json");
                http.send(jsonString);
                http = new XMLHttpRequest();
                logText("Verification email data for user " + message.author.id + " with email " + message.content);
            } else {
                // Recherche de l'utilisateur avec son ID
                guild.members.fetch(message.content).then((user) => {
                    memberID = user;
                    message.react("‚úÖ");
                    message.reply("Bonjour, je vais proc√©der √† la recherche d'informations sur cette personne.")
                        .then(msg => {
                            setTimeout(() => msg.delete()
                                .then()
                                .catch(console.error)
                                , 10000)
                        })
                        .catch(console.error);
                    setTimeout(() => message.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                    var data = {
                        channel_id: message.channel.id,
                        user_message_id: message.id,
                        author_id: message.author.id,
                        content: message.content,
                        request_type: "CHECK_ID"
                    };
                    var jsonString = JSON.stringify(data);

                    http.open(method, url);
                    http.setRequestHeader("Content-Type", "application/json");
                    http.send(jsonString);
                    http = new XMLHttpRequest();
                    logText("Verification ID data for user " + message.author.id + " with ID " + message.content);
                }).catch(error => {
                    // Si l'ID n'existe pas sur ce serveur
                    memberID = 0;
                    message.react("‚ùå");
                    message.reply("Bonjour, merci de renseigner **un email** √† v√©rifier ou **l'ID d'un membre** du serveur uniquement. Vous pouvez aussi demander de l" + "'" + "aide aupr√®s des mod√©rateurs, via le canal <#949665174883803196>")
                        .then(msg => {
                            setTimeout(() => msg.delete()
                                .then()
                                .catch(console.error)
                                , 10000)
                        })
                        .catch(console.error);
                    setTimeout(() => message.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                    logText("Email or ID incorrect for user " + message.author.id + " in channel " + message.channel.id);
                })
            }
        } else {
            message.react("‚õî");
            message.reply("Bonjour, vous n'√™tes pas autoris√© √† utiliser ce service.")
                .then(msg => {
                    setTimeout(() => msg.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                })
                .catch(console.error);
            setTimeout(() => message.delete()
                .then()
                .catch(console.error)
                , 5000)
            logText("User not allowed to use the service " + message.author.id + " in channel " + message.channel.id);
        }
        // Channel r√¥les
    } else if (message.channel.id === ChannelID_Roles) {
        // R√¥le contr√¥leur uniquement
        if (message.member.roles.cache.has(RoleID_controleur)) {
            // Recherche de l'utilisateur avec son ID
            guild.members.fetch(message.content).then((user) => {
                memberID = user;
                // Utilisateur membre uniquement
                if (memberID.roles.cache.has(RoleID_membre)) {
                    message.react("‚úÖ");
                    // Recherche du (premier) r√¥le de responsabilit√© de l'auteur (contenants l'emoji üëë)
                    var author = guild.members.cache.get(message.author.id);
                    var respo_role = author.roles.cache.find(respo_role => respo_role.name.includes("üëë"));
                    if (respo_role === undefined) {
                        logText("No role found for user " + message.author.id);
                        message.reply('L' + "'" + 'ID est correct, malheureusement, vous n' + "'" + '√™tes pas responsable d' + "'" + 'un groupe (üëë) pour donner des droits. Vous pouvez demander de l' + "'" + 'aide aupr√®s des mod√©rateurs, via le canal <#949665174883803196>')
                            .then(msg => {
                                memberID = 0;
                                setTimeout(() => msg.delete()
                                    .then()
                                    .catch(console.error)
                                    , 10000)
                            })
                            .catch(console.error);
                        setTimeout(() => message.delete()
                            .then()
                            .catch(console.error)
                            , 5000)
                    } else {
                        // R√©cup√©rer l'emoji du r√¥le en √©vitant une erreur de lecture
                        var emoji = String.fromCodePoint(respo_role.name.codePointAt(0));
                        // Trouver le r√¥le enfant li√© √† cet emoji
                        var member_role = guild.roles.cache.find(member_role => member_role.name.startsWith(emoji) && !member_role.name.includes("üëë"));
                        if (member_role === undefined) {
                            memberID = 0;
                            message.reply("Il n'existe pas de r√¥le enfant associ√© √† la responsabilit√© " + '"' + respo_role.name + '".  Vous pouvez demander de l' + "'" + 'aide aupr√®s des mod√©rateurs, via le canal <#949665174883803196>')
                                .then(msg => {
                                    setTimeout(() => msg.delete()
                                        .then()
                                        .catch(console.error)
                                        , 10000)
                                })
                                .catch(console.error);
                            setTimeout(() => message.delete()
                                .then()
                                .catch(console.error)
                                , 5000)
                        } else {
                            // Cr√©er le menu de s√©lection
                            var row = new Discord.MessageActionRow()
                                .addComponents(
                                    new Discord.MessageSelectMenu()
                                        .setCustomId('select')
                                        .setPlaceholder('Liste des r√¥les')
                                        .addOptions(
                                            {
                                                label: member_role.name,
                                                value: member_role.id,
                                            },
                                            {
                                                label: respo_role.name,
                                                value: respo_role.id,
                                            },
                                        ),
                                );
                            message.reply({ content: ('S√©lectionner le r√¥le que vous souhaitez associer √† **<@' + memberID + '>** dans le menu ci-dessous :'), components: [row] })
                                .then(msg => {
                                    setTimeout(() => msg.delete()
                                        .then()
                                        .catch(console.error)
                                        , 10000)
                                })
                                .catch(console.error);
                            setTimeout(() => message.delete()
                                .then()
                                .catch(console.error)
                                , 10000)
                            logText("Role selection for user " + message.author.id + " with ID " + message.content);
                        }
                    }
                } else {
                    message.react("‚õî");
                    message.reply("L'utilisateur n'a pas termin√© son int√©gration au serveur. Ce service est r√©serv√© au role <@&" + RoleID_membre + ">")
                        .then(msg => {
                            setTimeout(() => msg.delete()
                                .then()
                                .catch(console.error)
                                , 5000)
                        })
                        .catch(console.error);
                    setTimeout(() => message.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                    logText("User not allowed to use the service " + message.author.id + " in channel " + message.channel.id);
                }
            }).catch(error => {
                // Si l'ID n'existe pas sur ce serveur
                memberID = 0;
                message.react("‚ùå");
                message.reply("Bonjour, merci de renseigner uniquement **l'ID d'un membre** du serveur (voir tuto ci-dessus). Vous pouvez aussi demander de l" + "'" + "aide aupr√®s des mod√©rateurs, via le canal <#949665174883803196>")
                    .then(msg => {
                        setTimeout(() => msg.delete()
                            .then()
                            .catch(console.error)
                            , 10000)
                    })
                    .catch(console.error);
                setTimeout(() => message.delete()
                    .then()
                    .catch(console.error)
                    , 5000)
                logText("ID incorrect for user " + message.author.id + " with ID " + message.content + " in channel " + message.channel.id);
            })
        } else {
            message.react("‚õî");
            message.reply("Bonjour, vous n'√™tes pas autoris√© √† utiliser ce service.")
                .then(msg => {
                    setTimeout(() => msg.delete()
                        .then()
                        .catch(console.error)
                        , 5000)
                })
                .catch(console.error);
            setTimeout(() => message.delete()
                .then()
                .catch(console.error)
                , 5000)
            logText("User not allowed to use the service " + message.author.id + " in channel " + message.channel.id);
        }
    }
});

Client.on("messageReactionAdd", (reaction, user) => {
    // Filter out bot reactions
    if (user.bot) return;
    logText("Bot reaction received from " + user.id);

    // Check if it's the rules channel
    if (reaction.message.channel.id === ChannelID_Rules) {
        logText("Reaction received in the rules channel.");

        // Check if the emoji is the checkmark
        if (reaction.emoji.name === "‚úÖ") {
            var data = {
                channel_id: ChannelID_Rules,
                user_message_id: " ",
                author_id: user.id,
                content: " ",
                request_type: "RULES"
            };
            var jsonString = JSON.stringify(data);

            http.open(method, url);
            http.setRequestHeader("Content-Type", "application/json");
            http.send(jsonString);
            logText("Sent rules acceptance data for user " + user.id);
            http = new XMLHttpRequest();
        }
    }
});

Client.on("interactionCreate", interaction => {
    // Check if it's the roles channel
    logText("Bot interaction received from " + interaction.user.id);

    if (interaction.channel.id === ChannelID_Roles) {

        if (interaction.isSelectMenu()) {
            if (interaction.customId === "select") {
                try {
                    var role = interaction.guild.roles.cache.find(role => role.id === interaction.values[0]);
                    interaction.member.roles.add(role);
                    interaction.update({ content: ('‚úÖ Le r√¥le ' + role.name + ' a √©t√© ajout√© !') });
                    logText("Role " + role.name + " added to user " + interaction.member.id);
                } catch (error) {
                    logText("Error adding role: " + error.message);
                }
            }
        }
    }
});

Client.on("error", (e) => {
    logText("Discord client error: " + e.message);
});

Client.on("disconnect", () => {
    logText("Bot disconnected.");
});

// Express server for status endpoint
app.get('/status', (req, res) => {
    if (Client.isReady()) {
        res.status(200).send('Bot is running');
    } else {
        res.status(500).send('Bot is not running');
    }
});

app.listen(port, () => {
    logText(`Status server running at http://localhost:${port}`);
});
